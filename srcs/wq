#include "../includes/fractol.h"

int	calculate_iterations(t_complex z0, t_complex c)
{
	t_complex	zn;
	int		n;

	n = 0;
	zn = z0;
	while (n < MAX_ITERATIONS)
	{
		zn = sum(square(zn), c);
		if (distance(zn) > 2)
			break;
		n++;
	}
	return (n);
}

void	compute_fractal(t_data *data)
{
	t_fractal	tmp;
	int			i;
	t_complex	z0;

	data->fractal = malloc(sizeof(t_fractal) * WIDTH * HEIGHT);
	//MALLOC_ERROR
	if (!data->fractal)
		return;
	i = 0;
	z0.re = 0;
	z0.im = 0;
	while (i < WIDTH * HEIGHT)
	{
		tmp.nbr = data->points[i];
		if (data->type == MANDELBROT)
			tmp.iterations = calculate_iterations(z0, data->points[i]);
		else if (data->type == JULIA)
			tmp.iterations = calculate_iterations(data->points[i], data->c);
		data->fractal[i] = tmp;
		i++;
	}
}

void	initialize_sierpinski(t_data *data)
{
	t_fractal	tmp;
	int			i;

	data->fractal = malloc(sizeof(t_fractal) * WIDTH * HEIGHT);
	//MALLOC_ERROR
	if (!data->fractal)
		return;
	i = 0;
	while (i < WIDTH * HEIGHT)
	{
		tmp.nbr = data->points[i];
		tmp.iterations = 0;
		data->fractal[i] = tmp;
		i++;
	}
}

void	fill_rectangle(double x, double y, double a, double b, int n, t_data *data)
{
	double	i;
	double	j;

	j = y;
	while (j < b)
	{
		i = x;
		while (i < a)
		{
			data->fractal[(int)(j * HEIGHT + i)].iterations = n;
			i++;
		}
		j++;
	}
}

void	fill_sierpinski(double x, double y, double a, double b, int n, t_data *data)
{
	if (n > 0)
	{
		fill_rectangle(x + a / 3, y + b / 3, x + 2 * a / 3, y + 2 * b / 3, n, data);
		fill_sierpinski(x, y, a / 3, b / 3, n - 1, data);
		/*fill_sierpinski(x+a/3, y, a/3, b/3, n-1, data);
		fill_sierpinski(x+2*a/3, y, a/3, b/3, n-1, data);
		fill_sierpinski(x, y+b/3, a/3, b/3, n-1, data);
		fill_sierpinski(x+2*a/3, y+b/3, a/3, b/3, n-1, data);
		fill_sierpinski(x, y+2*b/3, a/3, b/3, n-1, data);
		fill_sierpinski(x+a/3, y+2*b/3, a/3, b/3, n-1, data);
		fill_sierpinski(x+2*a/3, y+2*b/3, a/3, b/3, n-1, data);*/
	}
}

void	compute_sierpinski(t_data *data)
{
	initialize_sierpinski(data);
	fill_sierpinski(0.0000, 0.0000, 900.0000,  900.0000, 9, data);
}
